Accumulate_DF %>%
ggplot(., aes(x = yearofloss, y = accumulated_loss, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::comma)
# Creating an Accumlation of claim $ plot for whole country
Accumulate_DF %>%
group_by(., yearofloss) %>%
summarise(., accumulated_loss = sum(accumulated_loss)) %>%
ggplot(., aes(x = yearofloss, y = accumulated_loss)) +
geom_line() +
scale_y_continuous(labels = scales::comma)
# Creating Standardized plot for accumulation for all 50 states to see if line type (log, linear, exponential) is categorical
Accumulate_DF_0_to_1 %>%
ggplot(., aes(x = yearofloss, y = standardized_accumulation, color = state)) +
geom_line()
library(googleVis)
## Example showing US data by state
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
rm(list = ls())
library(googleVis)
## Example showing US data by state
require(datasets)
states <- data.frame(state.name, state.x77)
View(states)
source('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims/R_Scripts/base.R', echo=TRUE)
# Creating a descending bar plot of the above data
Total_State_Summed_Claims %>%
arrange(., desc(Total_Summed_Loss)) %>%
ggplot(., aes(x = reorder(state, -Total_Summed_Loss), y = Total_Summed_Loss)) +
geom_bar(stat = 'identity') +
labs(title = 'Total Money Claimed to Date by Each State', x = 'State', y = '$') +
theme(axis.text.x = element_text(angle = 270)) +
scale_y_continuous(labels = scales::comma)
View(raw.df)
View(Total_State_Summed_Claims)
states <- data.frame(state.name, state.x77)
View(states)
View(Total_State_Summed_Claims)
G4 <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G4)
Log_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
mutate(., Log_Total_Summed_loss = log(x = Total_Summed_Loss, base = 10))
G4 <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G4)
Sans_Top_2_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
filter(., state != 'TX', state != 'LA')
G_without_LA_TX <- gvisGeoChart(Sans_Top_2_Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
Sans_Top_2_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
filter(., state != 'TX', state != 'LA')
G_without_LA_TX <- gvisGeoChart(Sans_Top_2_Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
G_log <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_log)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_reg)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
View(Total_State_Summed_Claims)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
# Creating a table of the sum of all claims for each state throughout the dataset
Total_State_Summed_Claims =
raw.df %>%
filter(., !is.na(state), !is.na(amountpaidonbuildingclaim), !is.na(amountpaidoncontentsclaim)) %>%
group_by(., state) %>%
summarise(., Total_Summed_Loss = sum(amountpaidonbuildingclaim, amountpaidoncontentsclaim))
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
# Log version
Log_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
mutate(., Log_Total_Summed_loss = log(x = Total_Summed_Loss, base = 10))
G_log <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_log)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
Total_State_Summed_Claims
Total_State_Summed_Claims$state
Total_State_Summed_Claims$Total_Summed_Loss
length(Total_State_Summed_Claims$state)
length(Total_State_Summed_Claims$Total_Summed_Loss)
gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
dim(Total_State_Summed_Claims)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
# Log version
Log_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
mutate(., Log_Total_Summed_loss = log(x = Total_Summed_Loss, base = 10))
G_log <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_log)
# Creating a table of the sum of all claims for each state throughout the dataset
Total_State_Summed_Claims =
raw.df %>%
filter(., !is.na(state), !is.na(amountpaidonbuildingclaim), !is.na(amountpaidoncontentsclaim)) %>%
group_by(., state) %>%
summarise(., Total_Summed_Loss = sum(amountpaidonbuildingclaim, amountpaidoncontentsclaim))
View(Total_State_Summed_Claims)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_reg)
library(googleVis)
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_reg)
# Log version
Log_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
mutate(., Log_Total_Summed_loss = log(x = Total_Summed_Loss, base = 10))
G_log <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_log)
# Attempt to take out top 2 states version
Sans_Top_2_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
filter(., state != 'TX', state != 'LA')
View(Total_State_Summed_Claims)
View(Sans_Top_2_Total_State_Summed_Claims)
G_without_LA_TX <- gvisGeoChart(Sans_Top_2_Total_State_Summed_Claims, "state", "Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
G_without_LA_TX <- gvisGeoChart(Sans_Top_2_Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_without_LA_TX)
## Example showing US data by state
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
## Markers Example
## A marker style map renders bubble-shaped markers at specified
## locations with the color and size that you specify.
G4 <- gvisGeoChart(CityPopularity, locationvar='City', colorvar='Popularity',
options=list(region='US', height=350,
displayMode='markers',
colorAxis="{values:[200,400,600,800],
colors:[\'red', \'pink\', \'orange',\'green']}")
)
plot(G4)
G5 <- gvisGeoChart(Andrew, "LatLong", colorvar='Speed_kt',
options=list(region="US"))
plot(G5)
G6 <- gvisGeoChart(Andrew, "LatLong", sizevar='Speed_kt',
colorvar="Pressure_mb", options=list(region="US"))
plot(G6)
## Create lat:long values and plot a map of Oceania
## Set background colour to light-blue
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
gvisGeoMap 47
# Attempt to take out top 2 states version
Sans_Top_2_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
filter(., state != 'TX', state != 'LA')
G_without_LA_TX <- gvisGeoChart(Sans_Top_2_Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_without_LA_TX)
# Creating a table of the all claims for nation throughout the years
Total_Nation_Summed_Claims =
raw.df %>%
filter(., !is.na(yearofloss), !is.na(amountpaidonbuildingclaim), !is.na(amountpaidoncontentsclaim)) %>%
group_by(., yearofloss) %>%
summarise(., Total_Summed_Loss = sum(amountpaidonbuildingclaim, amountpaidoncontentsclaim))
# Creating a line plot of claims for the nation for whole dataset
Total_Nation_Summed_Claims %>%
ggplot(., aes(x = yearofloss, y = Total_Summed_Loss)) +
geom_line()
# Creating a line plot of claims for the nation for whole dataset
Total_Nation_Summed_Claims %>%
ggplot(., aes(x = yearofloss, y = Total_Summed_Loss)) +
geom_line() +
labs(title = 'Annual NFIP Claims Across the Nation', x = 'year', y = '$') +
scale_y_continuous(labels = scales::comma)
# Creating a descending bar plot of the above data
Total_State_Summed_Claims %>%
arrange(., desc(Total_Summed_Loss)) %>%
ggplot(., aes(x = reorder(state, -Total_Summed_Loss), y = Total_Summed_Loss)) +
geom_bar(stat = 'identity') +
labs(title = 'Total Money Claimed to Date by Each State', x = 'State', y = '$') +
theme(axis.text.x = element_text(angle = 270)) +
scale_y_continuous(labels = scales::comma)
# Creating list of top 10 state names in terms of total claims paid
Top_Ten_Total_State_Summed_Claims =
Total_State_Summed_Claims%>%
arrange(., desc(Total_Summed_Loss)) %>%
select(., state) %>%
head(., 10)
Top_Ten_Total_State_Summed_Claims = Top_Ten_Total_State_Summed_Claims[['state']]
# Assembling a new dataframe from Raw.df that only includes top ten states
Top_10_DF = data.frame()
for (i in 1:10) {
intermediate = raw.df %>%
filter(., state == Top_Ten_Total_State_Summed_Claims[i])
Top_10_DF = rbind(Top_10_DF, intermediate)
}
# Creating a descending bar plot of the total claims paid out by state for top 10 states
Top_10_DF %>%
filter(., !is.na(state), !is.na(amountpaidonbuildingclaim), !is.na(amountpaidoncontentsclaim)) %>%
group_by(., state) %>%
summarise(., Total_Summed_Loss = sum(amountpaidonbuildingclaim, amountpaidoncontentsclaim)) %>%
ggplot(., aes(x = reorder(state, -Total_Summed_Loss), y = Total_Summed_Loss)) +
geom_bar(stat = 'identity') +
labs(title = 'Total Money Claimed to Date for Top 10 States', x = 'State', y = '$') +
scale_y_continuous(labels = scales::comma)
# All 50 states over time
Annual_State_Summed_Claims %>%
ggplot(., aes(x = yearofloss, y = Annual_Summed_Loss, color = state)) +
geom_line() +
labs(title = 'Total Money Claimed by State and Year', x = 'Year', y = '$') +
scale_y_continuous(labels = scales::comma)
# Top 10 states over time
Annual_State_Summed_Claims_Top_10 %>%
ggplot(., aes(x = yearofloss, y = Annual_Summed_Loss, color = state)) +
geom_line() +
labs(title = 'Total Money Claimed by State and Year for Top 10', x = 'Year', y = '$') +
scale_y_continuous(labels = scales::comma)
# Top 10 states over time
Annual_State_Summed_Claims_Top_10 %>%
ggplot(., aes(x = yearofloss, y = 100*(Annual_Summed_Loss / sum(Annual_Summed_Loss)), color = state)) +
geom_line() +
labs(title = 'Annual / Total Money Claimed to Date for NFIP Program', x = 'Year', y = 'Percent of $')
# Creating an Accumlation of claim $ plot for all states
Accumulate_DF %>%
ggplot(., aes(x = yearofloss, y = accumulated_loss, color = state)) +
geom_line() +
scale_y_continuous(labels = scales::comma)
# Creating an Accumlation of claim $ plot for whole country
Accumulate_DF %>%
group_by(., yearofloss) %>%
summarise(., accumulated_loss = sum(accumulated_loss)) %>%
ggplot(., aes(x = yearofloss, y = accumulated_loss)) +
geom_line() +
scale_y_continuous(labels = scales::comma)
# Creating Standardized plot for accumulation for all 50 states to see if line type (log, linear, exponential) is categorical
Accumulate_DF_0_to_1 %>%
ggplot(., aes(x = yearofloss, y = standardized_accumulation, color = state)) +
geom_line()
# Regular version
G_reg <- gvisGeoChart(Total_State_Summed_Claims, "state", "Total_Summed_Loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_reg)
# Log version
Log_Total_State_Summed_Claims = Total_State_Summed_Claims %>%
mutate(., Log_Total_Summed_loss = log(x = Total_Summed_Loss, base = 10))
G_log <- gvisGeoChart(Log_Total_State_Summed_Claims, "state", "Log_Total_Summed_loss",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G_log)
rm(list = ls())
shiny::runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
shiny::runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
?fluidRow
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/fema_claims_new/FEMA_Flood_Claims')
rm(list = ls(
))
shiny::runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Intro_pt2 =
"The data analyzed herein comes from presidential briefings transcripts. These briefings are conducted by the president’s press secretary and give us glimpses into two important topics. First, how has the president responded to circumstantial and uncontrollable events? For instance, how did George W. Bush respond to the attack on the World Trade Centers? Second, what initiatives have been prioritized for a given president by their own volition? For example, Barach Obama chose to prioritize healthcare reform over other policy initiatives."
Intro_pt1 =
"What do bald eagles and the President of the United States (POTUS) have in common? They both represent the pinnacle of power in the natural and political environments.  Dramatization aside, it is both advantageous and possible to use data science to understand what the POTUS has emphasized over the course of his/her presidency."
Intro_pt2 =
"The data analyzed herein comes from presidential briefings transcripts. These briefings are conducted by the president’s press secretary and give us glimpses into two important topics. First, how has the president responded to circumstantial and uncontrollable events? For instance, how did George W. Bush respond to the attack on the World Trade Centers? Second, what initiatives have been prioritized for a given president by their own volition? For example, Barach Obama chose to prioritize healthcare reform over other policy initiatives."
Intro_pt2_1 =
"The employed data science methods are simple."
Intro_pt2_2 =
"1. Automate the collection of all presidential briefings"
Intro_pt2_3 =
"2. Count the occurrence of given keywords (terrorism, Russia, Corona Virus, etc.)"
Intro_pt2_4 =
"3. Plot the occurrence of keywords over time (POTUS Trends)"
Intro_pt2_5 =
"4. Compare this plot to google search trends (GS Trends)"
Intro_pt2_6 =
"5. If GS Trends and POTUS Trends are highly correlated it is likely the president is responding to circumstance"
Intro_pt2_7 =
"6. If GS Trends and POTUS Trends are not correlated it is likely the president is bringing forth his own priorities"
Intro_pt3 =
"Let us jump in!"
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
load(file = "processed_data.Rdata")
class(State_Names
)
Policy_Names = list("Criminal Justice", "Culture and Society", "Economic Affairs", "Education", "Environment", "Government Operations", "Social Welfare", "Foreign Affairs and National Security")
as.factor(Policy_Names)
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy = read.csv(file = '/Users/michaellink/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/_data/policies/policy_names.csv')
View(Policy)
Policy_Type = as.factor(Policy$policy_type)
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy_Type
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy_Type
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy_Type
as.factor(Policy_Type
)
levels(as.factor(Policy_Type))
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset
Policy_Names_Subset = levels(as.factor(Policy_Names_Subset$policy))
levels(as.factor(Policy_Type))
Policy_Names_Subset
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset = levels(as.factor(Policy_Names_Subset$policy))
Policy_Names_Subset
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset
Policy_Names_Subset$policy
Policy_Names_Subset$policy[1]
Policy_Names_Subset = as.factor(Policy_Names_Subset$policy)
Policy_Names_Subset
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset
Policy_Names_Subset$policy
class(Policy_Names_Subset$policy)
list(Policy_Names_Subset$policy)
vector(Policy_Names_Subset$policy)
View(Policy_Names)
array(Policy_Names_Subset$policy)
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset
Policy_Names_Subset = array(Policy_Names_Subset$policy)
class(Policy_Names_Subset)
Policy_Names_Subset = Policy %>%
filter(., policy_type == "Health")
Policy_Names_Subset = array(Policy_Names_Subset$policy)
Policy_Names_Subset
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
Policy_Names_Subset[1]
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/Untitled.R')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/lecture_example/flights')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/lecture_example/flights')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/Shiny/lecture_example/flights')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
choices = unique(Policy[Policy$policy_type == "Health"
])
choices = unique(Policy[Policy$policy_type == "Health"])
#Policy_Names = list("Criminal Justice", "Culture and Society", "Economic Affairs", "Education", "Environment", "Government Operations", "Social Welfare", "Foreign Affairs and National Security")
Policy = read.csv(file = '/Users/michaellink/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/_data/policies/policy_names.csv')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
rem(list=ls(
))
rm(list=ls(
))
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
#Policy_Names = list("Criminal Justice", "Culture and Society", "Economic Affairs", "Education", "Environment", "Government Operations", "Social Welfare", "Foreign Affairs and National Security")
Policy = read.csv(file = '/Users/michaellink/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/_data/policies/policy_names.csv')
choices = unique(Policy[Policy$policy_type == "Health"])
View(Policy)
Policy[Policy$policy_type=="Health"]
Policy
colnames(Policy)
Policy[,Policy$policy_type=="Health"]
Policy[,Policy$policy_type=="Health"]
rownames(Policy)
Policy$policy_type
Policy[29,1]
length(Policy[29,1])
Policy["Health",]
Policy["Health ",]
Policy[" Health ",]
Policy[" Health",]
Policy$policy_type == Health
Policy$policy_type == 'Health'
Policy[Policy$policy_type == 'Health']
Policy[Policy$policy_type == 'Health',]
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
rm(list = ls())
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
?observe
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
rm(list = ls())
shiny::runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
runApp('~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President')
setwd("~/Desktop/__NYCDSA/_Projects/web_scraping/presidents/How_to_Talk_Like_a_President/shiny_app/How_to_Talk_Like_a_President")
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='data-science-link',
token='A58C9B00C7DD481FE832FEFD87527A37',
secret='odt42SgZGo/KlnYyQlNvZ8WRsDp9/FJMVv6WfsVt')
clear
runApp()
